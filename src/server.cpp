#include <httplib.h>
#include <string>
#include <iostream>
#include <fstream>
#include <vector>

# include "dijkstra.cpp"

/**
 * @brief load static file (html,js,css) from disk
 * 
 * @param path      in: path to file
 * @param loaded    out: string with file contents 
 */
void loadStatic(std::string& path, std::string& loaded){
    std::ifstream staticFile (path);
    std::string line;
    if(staticFile.is_open())
    {
        while ( getline (staticFile,line) )
            {
                loaded += line + '\n';
            }
    }
}

/**
 * @brief start calculation of path and create result json file
 * 
 * @param longStart route starting point longitude
 * @param latStart  route starting point latitude
 * @param longGoal  route goal longitude
 * @param latGoal   route goal latitude
 * @param response  out: json response containing calculated route
 */
void generateReponse(double longStart, double latStart, double longGoal, double latGoal, std::string& response){
    
    // TODO: fill with real routing response
    std::vector<double> path {longStart, latStart, longGoal, latGoal};
    
    // response has to be in [[lat,long],...] format, so (long, lat) is swapped
    response += "{\"path\":[";
    response += "[" + std::to_string(path.at(1)) + "," + std::to_string(path.at(0)) + "]";
    for(int i=1; i<path.size()/2; ++i){
        response += ",[" + std::to_string(path.at(2*i+1)) + "," + std::to_string(path.at(2*i)) + "]";
    
    }
    response += "]}";


    response = "{\"path\":[[-58.563559,-176.567797],[-58.563559,-176.822034],[-58.563559,-177.076271],[-58.563559,-177.330508],[-58.563559,-177.584746],[-58.563559,-177.838983],[-58.563559,-178.093220],[-58.563559,-178.347458],[-58.563559,-178.601695],[-58.563559,-178.855932],[-58.563559,-179.110169],[-58.563559,-179.364407],[-58.563559,-179.618644],[-58.317797,-179.618644],[-58.072034,-179.618644],[-57.826271,-179.618644],[-57.580508,-179.618644],[-57.334746,-179.618644],[-57.088983,-179.618644],[-56.843220,-179.618644],[-56.597458,-179.618644],[-56.351695,-179.618644],[-56.105932,-179.618644],[-55.860169,-179.618644],[-55.614407,-179.618644],[-55.368644,-179.618644],[-55.122881,-179.618644],[-54.877119,-179.618644],[-54.631356,-179.618644],[-54.385593,-179.618644],[-54.139831,-179.618644],[-53.894068,-179.618644],[-53.648305,-179.618644],[-53.402542,-179.618644],[-53.156780,-179.618644],[-52.911017,-179.618644],[-52.665254,-179.618644],[-52.419492,-179.618644],[-52.173729,-179.618644],[-51.927966,-179.618644],[-51.682203,-179.618644],[-51.436441,-179.618644],[-51.190678,-179.618644],[-50.944915,-179.618644],[-50.699153,-179.618644],[-50.453390,-179.618644],[-50.207627,-179.618644],[-49.961864,-179.618644],[-49.716102,-179.618644],[-49.470339,-179.618644],[-49.224576,-179.618644],[-48.978814,-179.618644],[-48.733051,-179.618644],[-48.487288,-179.618644],[-48.241525,-179.618644],[-47.995763,-179.618644],[-47.750000,-179.618644],[-47.504237,-179.618644],[-47.258475,-179.618644],[-47.012712,-179.618644],[-46.766949,-179.618644],[-46.521186,-179.618644],[-46.275424,-179.618644],[-46.029661,-179.618644],[-45.783898,-179.618644],[-45.538136,-179.618644],[-45.292373,-179.618644],[-45.046610,-179.618644],[-44.800847,-179.618644],[-44.555085,-179.618644],[-44.309322,-179.618644],[-44.063559,-179.618644],[-43.817797,-179.618644],[-43.572034,-179.618644],[-43.326271,-179.618644],[-43.080508,-179.618644],[-42.834746,-179.618644],[-42.588983,-179.618644],[-42.343220,-179.618644],[-42.097458,-179.618644],[-41.851695,-179.618644],[-41.605932,-179.618644],[-41.360169,-179.618644],[-41.114407,-179.618644],[-40.868644,-179.618644],[-40.622881,-179.618644],[-40.377119,-179.618644],[-40.131356,-179.618644],[-39.885593,-179.618644],[-39.639831,-179.618644],[-39.394068,-179.618644],[-39.148305,-179.618644],[-38.902542,-179.618644],[-38.656780,-179.618644],[-38.411017,-179.618644],[-38.165254,-179.618644],[-37.919492,-179.618644],[-37.673729,-179.618644],[-37.427966,-179.618644],[-37.182203,-179.618644],[-36.936441,-179.618644],[-36.690678,-179.618644],[-36.444915,-179.618644],[-36.199153,-179.618644],[-35.953390,-179.618644],[-35.707627,-179.618644],[-35.461864,-179.618644],[-35.216102,-179.618644],[-34.970339,-179.618644],[-34.724576,-179.618644],[-34.478814,-179.618644],[-34.233051,-179.618644],[-33.987288,-179.618644],[-33.741525,-179.618644],[-33.495763,-179.618644],[-33.250000,-179.618644],[-33.004237,-179.618644],[-32.758475,-179.618644],[-32.512712,-179.618644],[-32.266949,-179.618644],[-32.021186,-179.618644],[-31.775424,-179.618644],[-31.529661,-179.618644],[-31.283898,-179.618644],[-31.038136,-179.618644],[-30.792373,-179.618644],[-30.546610,-179.618644],[-30.300847,-179.618644],[-30.055085,-179.618644],[-29.809322,-179.618644],[-29.563559,-179.618644],[-29.317797,-179.618644],[-29.072034,-179.618644],[-28.826271,-179.618644],[-28.580508,-179.618644],[-28.334746,-179.618644],[-28.088983,-179.618644],[-27.843220,-179.618644],[-27.597458,-179.618644],[-27.351695,-179.618644],[-27.105932,-179.618644],[-26.860169,-179.618644],[-26.614407,-179.618644],[-26.368644,-179.618644],[-26.122881,-179.618644],[-25.877119,-179.618644],[-25.631356,-179.618644],[-25.385593,-179.618644],[-25.139831,-179.618644],[-24.894068,-179.618644],[-24.648305,-179.618644],[-24.402542,-179.618644],[-24.156780,-179.618644],[-23.911017,-179.618644],[-23.665254,-179.618644],[-23.419492,-179.618644],[-23.173729,-179.618644],[-22.927966,-179.618644],[-22.682203,-179.618644],[-22.436441,-179.618644],[-22.190678,-179.618644],[-21.944915,-179.618644],[-21.699153,-179.618644],[-21.453390,-179.618644],[-21.207627,-179.618644],[-20.961864,-179.618644],[-20.716102,-179.618644],[-20.470339,-179.618644],[-20.224576,-179.618644],[-19.978814,-179.618644],[-19.733051,-179.618644],[-19.487288,-179.618644],[-19.241525,-179.618644],[-18.995763,-179.618644],[-18.750000,-179.618644],[-18.504237,-179.618644],[-18.258475,-179.618644],[-18.012712,-179.618644],[-17.766949,-179.618644],[-17.521186,-179.618644],[-17.275424,-179.618644],[-17.029661,-179.618644],[-16.783898,-179.618644],[-16.538136,-179.618644],[-16.292373,-179.618644],[-16.046610,-179.618644],[-15.800847,-179.618644],[-15.555085,-179.618644],[-15.309322,-179.618644],[-15.063559,-179.618644],[-14.817797,-179.618644],[-14.572034,-179.618644],[-14.326271,-179.618644],[-14.080508,-179.618644],[-13.834746,-179.618644],[-13.588983,-179.618644],[-13.343220,-179.618644],[-13.097458,-179.618644],[-12.851695,-179.618644],[-12.605932,-179.618644],[-12.360169,-179.618644],[-12.114407,-179.618644],[-11.868644,-179.618644],[-11.622881,-179.618644]]}";

}
    
// global main html file contents, served to every client
static std::string page;

static AdjacencyArray adjArray;

int main(void)
{
    using namespace httplib;

    Server svr;

    // initialize main page from disk
    std::string path = "static/index.html";
    loadStatic(path, page);

    loadAdjacencyArray(adjArray, "data/worldGrid_1415_707.save");


    svr.Get("/", [](const Request& req, Response& res) {
        res.set_content(page, "text/html");
    });

    // handle client requests of form {longStart: double, latStart:double, longGoal:double, latGoal:double}
    // calculate path, return result path {failure: true/false, path:[[long,lat],[long,lat],...]}
    svr.Post("/getRoute", [](const Request& req, Response& res) {
        double longStart =  std::stod((*req.params.find("longStart")).second);
        double latStart =   std::stod((*req.params.find("latStart")).second);
        double longGoal =   std::stod((*req.params.find("longGoal")).second);
        double latGoal =    std::stod((*req.params.find("latGoal")).second);
        std::cout << "Route from (" << longStart << ", " << latStart << ") to (" << longGoal << ", " << latGoal << ")\n";
        

        //std::string response;
        //generateReponse(longStart, latStart, longGoal, latGoal, response);
        //std::cout << response << std::endl;

        uint64_t sNode = longLatToNodeId(adjArray, longStart, latStart);
        uint64_t tNode = longLatToNodeId(adjArray, longGoal, latGoal);

        std::vector<uint64_t> idPath;
        generatePath(idPath, sNode, tNode, adjArray);
        std::vector<double> nodePath;
        generateNodePath(nodePath, idPath, adjArray);

        std::string response;
        generateReponse(nodePath, response);

        // return geojson with of results path
        std::cout << response << std::endl;
        
        // return json with of results path
        res.set_content(response, "application/json");
    });

    svr.listen("localhost", 8080);
}